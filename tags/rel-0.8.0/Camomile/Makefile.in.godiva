#
# Copyright (C) 2001 Jean-Christophe FILLIATRE
#	        2002, 2003, 2004 Yamagata Yoriyuki
#
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License version 2, as published by the Free Software Foundation.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# 
# See the GNU Library General Public License version 2 for more details
# (enclosed in the file COPYING).

# where to install the binaries
prefix=@prefix@
exec_prefix=@exec_prefix@
BINDIR=@bindir@
PREFIX=$(prefix)

# where to install the data files
DATADIR=@datadir@

# other variables set by ./configure
OCAMLC   = @OCAMLC@
OCAMLOPT = @OCAMLOPT@
OCAMLYACC = @OCAMLYACC@
OCAMLLEX = @OCAMLLEX@
OCAMLDEP = @OCAMLDEP@
OCAMLLIB = @OCAMLLIB@
OCAMLBEST= @OCAMLBEST@
OCAMLVERSION = @OCAMLVERSION@
CAMLP4O = -pp "@CAMLP4O@ -I $(OCAMLLIB)"
INSTALL = @OCAMLINSTALL@
UNINSTALL = un@OCAMLINSTALL@
OCAMLDOC = @OCAMLDOC@
OCAMLMKLIB = @OCAMLMKLIB@
OPTPACK = @OPTPACK@

# compiler options
BOPTIONS = @DEBUG@
OOPTIONS = @PROFILE@

#
PACKAGE = camomile
VERSION = 0.8.0

###################################################################
# Build procedure
###################################################################

.PHONY : all byte opt tools toolslib test test.opt unimaps chamap_data unidata bytepack optpack dist


SUBDIR = -I internal -I public -I toolslib -I .
INCLUDES = $(SUBDIR)
BFLAGS = $(BOPTIONS) $(INCLUDES)
OFLAGS = $(OOPTIONS) $(INCLUDES)

# Generic targets
#################

all : byte $(OCAMLBEST) bytepack $(OPTPACK) unidata unimaps charmap_data locale_data

# Build the library
###################

lib : byte $(OCAMLBEST) bytepack $(OPTPACK)

INT =\
public/xArray.cmi public/oOChannel.cmi\
public/uChar.cmi public/uSet.cmi public/uMap.cmi public/uCharTbl.cmi\
public/unicodeString.cmi public/uText.cmi public/xString.cmi\
public/subText.cmi public/uLine.cmi public/locale.cmi\
public/uCharInfo.cmi public/uNF.cmi\
public/uCol.cmi public/caseMap.cmi public/uRe.cmi public/uReStr.cmi\
public/charEncoding.cmi public/uTF8.cmi public/uTF16.cmi public/uCS4.cmi\
public/uPervasives.cmi

NOOBJ_INT=\
public/unicodeString.cmi

OBJNOINI=\
internal/bitsvect.cmo internal/bytesvect.cmo\
internal/avlTree.cmo public/iSet.cmo public/iMap.cmo\
internal/tbl31.cmo internal/byte_labeled_dag.cmo\
public/xArray.cmo public/oOChannel.cmo\
public/uChar.cmo public/uSet.cmo\
public/uMap.cmo public/uCharTbl.cmo\
public/unicodeString.cmo\
public/uText.cmo public/xString.cmo\
public/subText.cmo public/uLine.cmo public/locale.cmo\
internal/hangul.cmo internal/unidata.cmo\
internal/charmap.cmo internal/unimap.cmo public/charEncoding.cmo\
public/uTF8.cmo public/uTF16.cmo public/uCS4.cmo\
public/uPervasives.cmo

OBJECTS =\
$(OBJNOINI) public/uCharInfo.cmo public/uNF.cmo public/uCol.cmo\
public/caseMap.cmo public/uRe.cmo\
internal/uReStrParser.cmo internal/uReStrLexer.cmo public/uReStr.cmo\

OPTOBJECTS= $(OBJECTS:.cmo=.cmx)

internal/uReStrParser.cmo : internal/uReStrParser.cmi
internal/uReStrParser.cmx : internal/uReStrParser.cmi

byte : camomileunpack.cma
opt : camomileunpack.cmxa

bytepack : camomile.cma camomile.cmi
optpack : camomile.cmxa

$(NOOBJ_INT:.cmi=.cmo) : %.cmo : %.mli %.cmi
	$(OCAMLC) -c $(BFLAGS) -impl $<

$(NOOBJ_INT:.cmi=.cmx) : %.cmx : %.mli %.cmi
	$(OCAMLOPT) -c $(OFLAGS) -impl $<

camomileconfig.ml :
	(echo "(* This file is automatically generated *)" &&\
	echo let datadir = \"@datadir@/camomile\" &&\
	echo let charmapdir = \"@datadir@/camomile/charmaps\" &&\
	echo let unimapdir = \"@datadir@/camomile/mappings\") >\
	camomileconfig.ml

# internal/tbl31.cmo : internal/tbl31.ml
# 	$(OCAMLC) -c -rectypes $(BFLAGS) $<

# internal/tbl31.cmx : internal/tbl31.ml
# 	$(OCAMLOPT) -c -rectypes $(OPTFLAGS) $<

# stub/camomile_stub.o : stub/camomile_stub.c
# 	cd stub && $(OCAMLC) $(BFLAGS) -c camomile_stub.c

camomileunpack.cma : camomileconfig.cmo $(OBJECTS)
	$(OCAMLC) -a -o camomileunpack.cma camomileconfig.cmo $(OBJECTS)

camomileunpack.cmxa : camomileconfig.cmx $(OPTOBJECTS)
	$(OCAMLOPT) -a -o camomileunpack.cmxa camomileconfig.cmx $(OPTOBJECTS)

#packing
camomile.cmo camomile.cmi : $(OBJECTS)
	$(OCAMLC) -pack -o camomile.cmo camomileconfig.cmo $(OBJECTS)

camomile.cmx camomile.o : $(NOOBJ_INT:.cmi=.cmx) $(OPTOBJECTS)
	$(OCAMLOPT) -pack -o camomile.cmx camomileconfig.cmx $(OPTOBJECTS)

camomile.cma : camomile.cmo
	$(OCAMLC) -a -o camomile.cma camomile.cmo
camomile.cmxa :  camomile.cmx
	$(OCAMLOPT) -a -o camomile.cmxa camomile.cmx

# camomile.cma : camomileconfig.cmo $(INT) $(OBJECTS) stub/camomile_stub.o
# 	$(OCAMLC) $(BFLAGS) -a -custom -o camomile.cma camomileconfig.cmo $(OBJECTS) -cclib -lcamomile_stub

# camomile.cmxa : camomileconfig.cmx $(INT) $(OPTOBJECTS) libcamomile_stub.a
# 	$(OCAMLOPT) $(OFLAGS) -a -o camomile.cmxa camomileconfig.cmx $(OPTOBJECTS) -cclib -lcamomile_stub

# Documentation
.PHONY : dochtml doclatex doctexi man

htdoc : dochtml
dochtml : 
	mkdir -p dochtml
	$(OCAMLDOC) $(INCLUDES) -html -d dochtml public/*.mli

doclatex :
	mkdir -p doclatex
	$(OCAMLDOC) $(INCLUDES) -latex -o doclatex/camomile.tex public/*.mli

doctexi : 
	mkdir -p doctexi
	$(OCAMLDOC) $(INCLUDES) -texi -o doctexi/camomile.texi public/*.mli

man : 
	mkdir -p man
	$(OCAMLDOC) $(INCLUDES) -man -d man public/*.mli

# Build procedures for tools
############################

TOOLSOBJ =\
toolslib/camomileconfig.cmo\
$(OBJECTS) toolslib/absOrd.cmo toolslib/absCe.cmo\
toolslib/colParser.cmo toolslib/colLexer.cmo
OPTTOOLSOBJ = $(TOOLSOBJ:.cmo=.cmx)

toolslib : toolslib.cma

toolslib.cma : $(TOOLSOBJ)
	$(OCAMLC) -a -o toolslib.cma $(TOOLSOBJ)

toolslib.cmxa : $(OPTTOOLSOBJ)
	$(OCAMLOPT) -a -o toolslib.cmxa $(OPTTOOLSOBJ)

# toolslib/toolslib.cma : $(TOOLSOBJ) libcamomile_stub.a
# 	$(OCAMLC) $(BFLAGS) -a -o toolslib/toolslib.cma -cclib -lcamomile_stub -ccopt -L. $(TOOLSOBJ)

# toolslib/toolslib.cmxa : $(OPTTOOLSOBJ) libcamomile_stub.a
# 	$(OCAMLOPT) $(OFLAGS) -a -o toolslib/toolslib.cmxa -cclib -lcamomile_stub -ccopt -L. $(OPTTOOLSOBJ)

toolslib/colParser.cmo : toolslib/colParser.cmi
toolslib/colParser.cmx : toolslib/colParser.cmi

TOOLS = \
tools/parse_unidata.byte tools/parse_uniset.byte tools/camlcharmap.byte\
tools/parse_specialcasing.byte tools/parse_casefolding.byte\
tools/parse_scripts.byte mappings/gen_mappings.byte
OPTTOOLS = $(TOOLS:.byte=.opt)

tools : $(TOOLS) tools/parse_allkeys.byte tools/camlrb.byte

$(TOOLS) : %.byte : toolslib.cma %.cmo 
	$(OCAMLC) $(BFLAGS) -o $@ str.cma toolslib.cma $*.cmo

$(OPTTOOLS) : %.opt : toolslib.cmxa %.cmx
	$(OCAMLOPT) $(OFLAGS) -o $@ str.cmxa toolslib.cmxa $*.cmx

tools/parse_allkeys.byte : toolslib.cma tools/parse_allkeys.cmo
	$(OCAMLC) $(BFLAGS) -o tools/parse_allkeys.byte str.cma toolslib.cma tools/parse_allkeys.cmo

tools/parse_allkeys.opt : toolslib.cmxa tools/parse_allkeys.cmx
	$(OCAMLOPT) $(OFLAGS) -o tools/parse_allkeys.opt str.cmxa toolslib.cmxa tools/parse_allkeys.cmx

tools/camlrb.cmo : tools/camlrb.ml
	$(OCAMLC) $(CAMLP4O) -c $(BFLAGS) tools/camlrb.ml

tools/camlrb.byte : toolslib.cma tools/camlrb.cmo
	$(OCAMLC) $(BFLAGS) -o tools/camlrb.byte str.cma toolslib.cma tools/camlrb.cmo

tools/camlrb.cmx : tools/camlrb.ml
	$(OCAMLOPT) $(CAMLP4O) -c $(OFLAGS) tools/camlrb.ml

tools/camlrb.opt : toolslib.cmxa tools/camlrb.cmx
	$(OCAMLOPT) $(CAMLP4O) $(OFLAGS) -o tools/camlrb.opt str.cmxa toolslib.cmxa tools/camlrb.cmx

# Compile unidata
###################################################################

UNIDATA_DIR = unidata
TR10DATA_DIR = unidata/tr10

FROM_UNIDATA =\
database/combined_class.mar database/composition.mar\
database/decomposition.mar database/general_category.mar\
database/to_lower1.mar database/to_title1.mar database/to_upper1.mar\
database/general_category_map.mar

PROPS =\
White_Space Bidi_Control Join_Control\
Hyphen Quotation_Mark Terminal_Punctuation Other_Math Hex_Digit\
ASCII_Hex_Digit Other_Alphabetic Ideographic Diacritic Extender\
Other_Lowercase Other_Uppercase Noncharacter_Code_Point\
Other_Grapheme_Extend Grapheme_Link IDS_Binary_Operator\
IDS_Trinary_Operator Radical Unified_Ideograph\
Other_Default_Ignorable_Code_Point Deprecated Soft_Dotted\
Logical_Order_Exception

CORE_DERIVED_PROPS =\
Math Alphabetic Lowercase Uppercase ID_Start ID_Continue\
XID_Start XID_Continue Default_Ignorable_Code_Point Grapheme_Extend\
Grapheme_Base

PROP_TBLS = $(patsubst %, database/%.mar, $(PROPS))
PROP_SETS = $(patsubst %, database/%_set.mar, $(PROPS))

CORE_DERIVED_PROP_TBLS = $(patsubst %, database/%.mar, $(CORE_DERIVED_PROPS))
CORE_DERIVED_PROP_SETS = $(patsubst %, database/%_set.mar,\
$(CORE_DERIVED_PROPS))

DATABASE =\
$(FROM_UNIDATA) $(PROP_TBLS) $(PROP_SETS)\
$(CORE_DERIVED_PROP_TBLS) $(CORE_DERIVED_PROP_TBL_SETS)\
database/case_folding.mar database/composition_exclusion.mar\
database/special_casing.mar database/scripts.mar database/allkeys.mar

unidata : $(DATABASE)
$(DATABASE) : database

database :
	mkdir -p database

$(PROP_TBLS) : database/%.mar : $(UNIDATA_DIR)/PropList.txt tools/parse_uniset.$(OCAMLBEST)
	grep $* $< | tools/parse_uniset.$(OCAMLBEST) database $*

$(PROP_SETS) : database/%_set.mar : $(UNIDATA_DIR)/PropList.txt tools/parse_uniset.$(OCAMLBEST)
	grep $* $< | tools/parse_uniset.$(OCAMLBEST) database $*

$(CORE_DERIVED_PROP_TBLS) : database/%.mar : $(UNIDATA_DIR)/DerivedCoreProperties.txt tools/parse_uniset.$(OCAMLBEST)
	grep $* $< | tools/parse_uniset.$(OCAMLBEST) database $*

$(CORE_DERIVED_PROP_SETS) : database/%_set.mar : $(UNIDATA_DIR)/DerivedCoreProperties.txt tools/parse_uniset.$(OCAMLBEST)
	grep $* $< | tools/parse_uniset.$(OCAMLBEST) database $*

$(FROM_UNIDATA) : tools/parse_unidata.$(OCAMLBEST) $(UNIDATA_DIR)/UnicodeData.txt
	tools/parse_unidata.$(OCAMLBEST) database < $(UNIDATA_DIR)/UnicodeData.txt

database/allkeys.mar : $(FROM_UNIDATA) $(PROP_TBLS) tools/parse_allkeys.$(OCAMLBEST)\
$(TR10DATA_DIR)/allkeys.txt
	tools/parse_allkeys.$(OCAMLBEST) database < $(TR10DATA_DIR)/allkeys.txt
database/case_folding.mar : tools/parse_casefolding.$(OCAMLBEST)\
$(UNIDATA_DIR)/CaseFolding.txt
	tools/parse_casefolding.$(OCAMLBEST) database < $(UNIDATA_DIR)/CaseFolding.txt

database/composition_exclusion.mar : tools/parse_uniset.$(OCAMLBEST) $(UNIDATA_DIR)/CompositionExclusions.txt	
	tools/parse_uniset.$(OCAMLBEST) database composition_exclusion < $(UNIDATA_DIR)/CompositionExclusions.txt

database/lowercases.mar : tools/parse_uniset.$(OCAMLBEST) $(UNIDATA_DIR)/DerivedCoreProperties.txt

database/special_casing.mar : tools/parse_specialcasing.$(OCAMLBEST) $(UNIDATA_DIR)/SpecialCasing.txt
	tools/parse_specialcasing.$(OCAMLBEST) database < $(UNIDATA_DIR)/SpecialCasing.txt

database/scripts.mar : tools/parse_scripts.$(OCAMLBEST) $(UNIDATA_DIR)/Scripts.txt
	tools/parse_scripts.$(OCAMLBEST) database < $(UNIDATA_DIR)/Scripts.txt

database/scripts_map.mar : tools/parse_scripts.$(OCAMLBEST) $(UNIDATA_DIR)/Scripts.txt
	tools/parse_scripts.$(OCAMLBEST) database < $(UNIDATA_DIR)/Scripts.txt

# Create Unicode mapping tables
###############################

# MAPPING_SOURCES = \
# charmaps/GB2312 charmaps/EUC-JP charmaps/EUC-KR charmaps/EUC-TW\
# charmaps/ISO-8859-7
# MAPPINGS = \
# mappings/cns11643.mar  mappings/jisx0201.mar  mappings/ksc5601.mar\
# mappings/gb2312.mar    mappings/jisx0208.mar\
# mappings/iso88597.mar  mappings/jisx0212.mar

unimaps : mappings/gen_mappings.$(OCAMLBEST)
	cd mappings && ./gen_mappings.$(OCAMLBEST)

# Compilation of charmap files
##############################

CHARMAP_DATA := $(patsubst charmaps/%,charmaps/%.mar, \
	$(filter-out charmaps/CVS charmaps/%.mar, $(wildcard charmaps/*)))

charmap_data : $(CHARMAP_DATA)
$(CHARMAP_DATA) : charmaps/%.mar : tools/camlcharmap.$(OCAMLBEST) charmaps/%
	tools/camlcharmap.$(OCAMLBEST) -d charmaps charmaps/$*

# Compilation of locale data
############################

LOCALE_DATA := $(patsubst locales/%.txt,locales/%.mar, \
	$(wildcard locales/*.txt))

locale_data : $(LOCALE_DATA)

$(LOCALE_DATA) : locales/%.mar : database tools/camlrb.$(OCAMLBEST) locales/%.txt
	tools/camlrb.$(OCAMLBEST) --file $(@:.mar=.txt) locales 


# ###################################################################
# # libre
# ###################################################################

# libre.byte: byte
# 	cd libre && $(MAKE) byte

# libre.opt: opt
# 	cd libre && $(MAKE) opt

# libre: libre.byte libre.$(OCAMLBEST)

# install-libre: libre
# 	cd libre && $(MAKE) install

###################################################################
# Installation and export
###################################################################

install: $(INSTALL) install-data

install-without-ocamlfind:
	mkdir -p $(OCAMLLIB)
	cp -f $(INT) $(OCAMLLIB)
	if [ $(OCAMLBEST) == opt ]; then cp -f public/*.cmx $(OCAMLLIB); fi
	if [ -f camomile.cmi ]; then cp -f camomile.cmi $(OCAMLLIB); fi
	if [ -f camomile.cma ]; then cp -f camomile.cma $(OCAMLLIB); fi
	if [ -f camomile.cmxa ]; then cp -f camomile.cmxa $(OCAMLLIB); fi
	if [ -f camomile.a ]; then cp -f camomile.a $(OCAMLLIB); fi
	if [ -f libcamomile.a ]; then cp -f libcamomile.a $(OCAMLLIB); fi
	if [ -f dllcamomile.so ]; then cp -f dllcamomile.so $(OCAMLLIB); fi
	if [ -f camomileunpack.cma ]; then cp -f camomileunpack.cma $(OCAMLLIB); fi
	if [ -f camomileunpack.cmxa ]; then cp -f camomileunpack.cmxa $(OCAMLLIB); fi
	if [ -f camomileunpack.a ]; then cp -f camomileunpack.a $(OCAMLLIB); fi
	if [ -f libcamomileunpack.a ]; then cp -f libcamomileunpack.a $(OCAMLLIB); fi
	if [ -f dllcamomileunpack.so ]; then cp -f dllcamomileunpack.so $(OCAMLLIB); fi


install-with-ocamlfind:
	files= &&\
	if [ $(OCAMLBEST) == opt ]; then files=public/*.cmx; fi &&\
	if [ -f camomile.cma ]; then files="camomile.* $$files"; fi&&\
	if [ -f libcamomile.a ]; then files="libcamomile.a $$files"; fi &&\
	if [ -f dllcamomile.so ]; then files="dllcamomile.so $$files"; fi &&\
	if [ -f camomileunpack.cma ];\
	 then files="camomileunpack.* $$files"; fi &&\
	if [ -f libcamomileunpack.a ];\
	 then files="libcamomileunpack.a $$files"; fi &&\
	if [ -f dllcamomileunpack.so ];\
	 then files="dllcamomileunpack.so $$files"; fi &&\
	ocamlfind install camomile $(INT) $$files META $(INT:cmi=mli)

install-data:
	mkdir -p $(PREFIX)/share
	mkdir -p $(PREFIX)/share/camomile
	mkdir -p $(PREFIX)/share/camomile/database
	cp -f database/*.mar $(PREFIX)/share/camomile/database || true
	mkdir -p $(PREFIX)/share/camomile/charmaps
	cp -f charmaps/*.mar $(PREFIX)/share/camomile/charmaps || true
	mkdir -p $(PREFIX)/share/camomile/mappings
	cp -f mappings/*.mar $(PREFIX)/share/camomile/mappings || true
	mkdir -p $(PREFIX)/share/camomile/locales
	cp -f locales/*.mar $(PREFIX)/share/camomile/locales || true

uninstall: $(UNINSTALL)

uninstall-without-ocamlfind:
	rm -f $(OCAMLLIB)/camomile.*
	rm -f $(foreach f,$(INT) $(INT:cmi=cmx),$(subst public,$(OCAMLLIB),$(f)))

uninstall-with-ocamlfind:
	ocamlfind remove camomile
	rm -fr $(PREFIX)/share/camomile

###################################################################
# Generic rules
###################################################################

.SUFFIXES: .mli .ml .cmi .cmo .cmx .mll .mly

.mli.cmi:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.cmo:
	$(OCAMLC) -c $(BFLAGS) $<

.ml.o:
	$(OCAMLOPT) -c $(OFLAGS) $<

.ml.cmx:
	$(OCAMLOPT) -c $(OFLAGS) $<

.mll.ml:
	$(OCAMLLEX) $<

.mly.ml:
	$(OCAMLYACC) -v $<

.mly.mli:
	$(OCAMLYACC) -v $<

###################################################################
# distribution
###################################################################

dist : camomile.tar.bz2

configure : configure.in
	autoconf

DISTDIR = $(PACKAGE)-$(VERSION)

camomile.tar.bz2 : depend configure
	mkdir -p $(DISTDIR)
	cp -f --parents\
	README Changes META COPYING\
	.depend Makefile.in configure\
	$(CHARMAP_DATA:.mar=)\
	locales/*.txt\
	unidata/README unidata/*.txt unidata/*.html\
	unidata/tr10/README unidata/tr10/*.txt\
	internal/*.ml internal/*.ml[ily]\
	public/*.ml public/*.mli\
	mappings/*.ml\
	toolslib/*.ml toolslib/*.ml[ily]\
	tools/*.ml\
	$(DISTDIR)
	tar -cjvf $(DISTDIR).tar.bz2 $(DISTDIR)
	rm -Rf $(DISTDIR)

###################################################################
# backup, clean, dist and depend :
###################################################################

clean::
	rm -f *.cm[ioxa] *.cmxa *.o *.so *.a */*.cm[iox] */*.o pocaml\
	*/*.byte */*.opt
	rm -f database/*.mar
	rm -f charmaps/*.mar
	rm -f mappings/*.mar
	rm -f locales/*.mar
	rm -f toolslib/*.cma toolslib/*.cmxa

depend::
	rm -f .depend
	$(OCAMLDEP) $(SUBDIR) *.ml *.mli\
	internal/*.ml internal/*.mli\
	public/*.ml public/*.mli\
	mappings/*.ml mappings/*.mli\
	toolslib/*.ml toolslib/*.mli\
	test/*.ml\
	> .depend
	$(OCAMLDEP) $(CAMLP4O) $(SUBDIR) \
	tools/$(TOOLS:.byte=.ml) >> .depend

include .depend
